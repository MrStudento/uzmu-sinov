
; /* Start:"a:4:{s:4:"full";s:42:"/js/plugins/textmistake.js?158384293620033";s:6:"source";s:26:"/js/plugins/textmistake.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($) {

    /**
     * @author  <github.com/tarampampam>
     * @weblog  http://blog.kplus.pro/
     * @project https://github.com/tarampampam/jquery.textmistake
     *
     * @version 0.1
     *
     * @licensy Licensed under the MIT, license text: http://goo.gl/JsVjCF
     */

    $.fn.textmistake = function (options) {
        // Default settings
        var defaults = {
                'l10n': {
                    'title': 'Report a typo:',
                    'urlHint': 'Url of the page with error:',
                    'errTextHint': 'Text with the error:',
                    'yourComment': 'Your comment:',
                    'userComment': 'Comment by user:',
                    'commentPlaceholder': 'Type comment',
                    'cancel': 'Cancel',
                    'send': 'Send',

                    'mailSubject': 'Typo on the site',
                    'mailTitle': 'Typo on the site',

                    'mailSended': 'Notification sent',
                    'mailSendedDesc': 'Your notification has been sent successfully. Thank you for your feedback!',
                    'mailNotSended': 'Sending error',
                    'mailNotSendedDesc': 'Your message has not been sent, sorry.',
                },
                'debug': true, // fet 'false' if all tested and works fine
                'initCss': true,
                'initHtml': true,

                'overlayColor': '#666',
                'overlayOpacity': 0.5,
                'windowZindex': 10001,
                'hideBodyScroll': true,

                'textLimit': 400,
                'contextLength': 40,
                'closeOnEsc': true,

                'mailTo': '', // your_email@address.here
                'mailFrom': 'textmistake@' + window.location.hostname,

                'mandrillKey': '', // Get your - https://mandrill.com/signup/
                'sendmailUrl': '',

                'animateSpeed': 0,
                'autocloseTime': 10000,

                // Callbacks
                'onShow': function (state) {
                },
                'onHide': function (state) {
                },
                'onLoadingShow': function (state) {
                },
                'onLoadingHide': function (state) {
                },
                'onCtrlEnter': function () {
                },
                'onEscPressed': function () {
                },
                'onSendMail': function (response) {
                },
                'onAjaxDone': function (response) {
                },
                'onAjaxResultError': function (response) {
                },
                'onAjaxSendError': function (response) {
                },
            },
            // Apply user settings to defaults
            settings = $.extend(true, defaults, options),
            log = function (text) {
                if (settings.debug) {
                    var now = new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
                    return console.log('[' + now + '] ' + text);
                }
            },
            html = $('html').first(),
            head = $('head').first(),
            body = $('body').first();

        // Add styles to head
        if (settings.initCss && (head.find('#mt_s').length === 0)) head.append('<style id="mt_s">' +
            '#mt_c .close {z-index: ' + (settings.windowZindex + 10).toString() + '}' +
            '#mt_o {' +
            'background:' + settings.overlayColor + ';' +
            'z-index:' + settings.windowZindex.toString() + ';' +
            '-moz-opacity:' + settings.overlayOpacity.toString() + ';' +
            'opacity:' + settings.overlayOpacity.toString() + ';}' +
            '#mt_c { z-index:' + (settings.windowZindex + 1).toString() + '; }' +
            '#mt_c div.loading {z-index:' + (settings.windowZindex + 2).toString() + '; } </style>');

        // Add html to body end
        if (settings.initHtml && (body.find('#mt_c').length === 0)) body.append('<div class="mipt-textmistake" id="mt_c">' +
            '<div class="mipt-textmistake__loading"><div class="mipt-textmistake__spinner"></div><div class="mipt-textmistake__overlay"></div></div>' +
            '<div class="mipt-textmistake__close close mt_cl" title="' + settings.l10n.cancel + '"></div>' +
            '<div class="mipt-textmistake__title">' + settings.l10n.title + '</div>' +
            '<p class="msg"></p>' +
            '<p class="nowrap">' + settings.l10n.urlHint + ' <a class="mipt-textmistake__url"></a></p>' +
            '<p class="nopadding">' + settings.l10n.errTextHint + '</p>' +
            '<blockquote></blockquote>' +
            '<p>' + settings.l10n.yourComment + '</p>' +
            '<p><textarea class="mipt-textmistake__message" maxlength="256" placeholder="' + settings.l10n.commentPlaceholder + '" value=""></textarea></p>' +
            // '<div class="mipt-textmistake__captcha">' +
            // '   <div>' +
            // '       <div style="text-align:center; margin-bottom:10px;">' +
            // '           <input type="input" name="captcha_sid" value="" placeholder="Введите код с картинки" style="width:100%;">' +
            // '       </div>' +
            // '       <div style="text-align:center; margin-bottom:10px;">' +
            // '           <img src="/bitrix/tools/captcha.php?captcha_sid=<?=$arResult[\'CAPTCHA_CODE\']?>" width="180" height="40" alt="CAPTCHA" />' +
            // '       </div>' +
            // '   </div>' +
            // '</div>' +
            '<div class="mipt-textmistake__controls">' +
            '   <div style="text-align:center">' +
            '       <button class="mipt-textmistake__control mt_cl">' + settings.l10n.cancel + '</button>' +
            '       <button class="mipt-textmistake__control mt_snd">' + settings.l10n.send + '</button>' +
            '   </div>' +
            '</div>' +
            '</div><div id="mt_o"></div>');

        var overlay = body.find('#mt_o'),
            content = body.find('#mt_c'),
            loading = content.find('.mipt-textmistake__loading').first(),
            title = content.find('.mipt-textmistake__title').first(),
            message = content.find('p.msg').first(),
            url = content.find('.mipt-textmistake__url').first(),
            textdata = content.find('blockquote').first(),
            comment = content.find('.mipt-textmistake__message').first(),
            close = content.find('.mt_cl'),
            send = content.find('.mt_snd'),

            autocloseTimer = null,

            // Get selected text
            getSelectionText = function () {
                var text = '';
                if (window.getSelection) {
                    text = window.getSelection().toString();
                } else if (document.selection && document.selection.type != 'Control') {
                    text = document.selection.createRange().text;
                }
                return text;
            },

            // Get all unselected text (return {before:N1,after:N2})
            // http://stackoverflow.com/a/9000719
            getUnselectedText = function (e) {
                var t, n, o, a = "", r = "";
                return "undefined" != typeof window.getSelection ? (t = window.getSelection(), t.rangeCount ? n = t.getRangeAt(0) : (n = document.createRange(), n.collapse(!0)), o = document.createRange(), o.selectNodeContents(e), o.setEnd(n.startContainer, n.startOffset), a = o.toString(), o.selectNodeContents(e), o.setStart(n.endContainer, n.endOffset), r = o.toString()) : (t = document.selection) && "Control" != t.type && (n = t.createRange(), o = document.body.createTextRange(), o.moveToElementText(e), o.setEndPoint("EndToStart", n), a = o.text, o.moveToElementText(e), o.setEndPoint("StartToEnd", n), r = o.text), {
                    before: a,
                    after: r
                }
            },
            // Make string escape (html chars)
            // http://stackoverflow.com/a/12034334
            escapeHtml = function (string) {
                var entityMap = {"&": "&amp;", "<": "&lt;", ">": "&gt;", '"': '&quot;', "'": '&#39;', "/": '&#x2F;'};
                return String(string).replace(/[&<>"'\/]/g, function (s) {
                    return entityMap[s];
                });
            },

            // Clear string from any 'invalid' chars and empty spaces
            clearString = function (s) {
                return s.replace(/\s+/g, ' ').replace(/[^a-zа-яё0-9\.\,\ \_\-\(\)\[\]\{\}\`\~\@\#\$\%\^\:\*]/gi, '');
            },

            // Move window to screen center
            centerWindow = function () {
                content.css({
                    'margin-top': -(content.height() / 2 + parseInt(content.css('padding-top'))),
                    'margin-left': -((content.width() / 2) + parseInt(content.css('padding-left')))
                });
            },

            // Show loading splash
            showLoading = function (visible) {
                if (typeof visible === 'boolean')
                    if (visible) {
                        if ($.isFunction(settings.onLoadingShow)) settings.onLoadingShow(visible); // callback
                        loading.show().find('*').show(); // show 'loading' container
                    } else {
                        if ($.isFunction(settings.onLoadingHide)) settings.onLoadingHide(visible); // callback
                        loading.hide(); // hide 'loading'
                    }
            },

            // Show mistake window
            showWindow = function (visible) {
                if (typeof visible === 'boolean')
                    if (visible) { // If we need to show
                        if ($.isFunction(settings.onShow)) settings.onShow(visible); // callback
                        if (settings.hideBodyScroll) html.addClass('mistake-open'); // hide body scroll
                        content.find('*').show(); // show all inside objects
                        message.html('').hide(); // reset and hide 'msg' container
                        loading.hide(); // hide 'loading' container
                        overlay.show(settings.animateSpeed); // show overlay
                        centerWindow(); // center message window (text must be setted before this function call)
                        content.show(settings.animateSpeed); // and show window
                        return true;
                    }

                    if ($.isFunction(settings.onHide)) settings.onHide(visible); // callback
                    if (settings.hideBodyScroll) html.removeClass("mistake-open");
                    content.hide(settings.animateSpeed); // hide window
                    overlay.hide(settings.animateSpeed); // hide overlay
                    return false;
            },

            // Get mistake window state
            windowIsOpen = function () {
                return (overlay.is(':visible') && content.is(':visible'));
            },

            // Modify window for message output, and show this shit
            showMessage = function (caption, text, cssclass) {
                if (!overlay.is(':visible')) overlay.show(); // show overlay if needed
                content.find('*').hide(); // hide all inside window
                showLoading(false); // hide loading screen (heed this line for callback)
                content.find('div.close').show(); // show close cross
                title.show().find('mipt-textmistake__title').html(caption).show(); // setup and show title
                if (cssclass) title.removeClass().addClass('mipt-textmistake__title mipt-textmistake__title_' + cssclass); // setup title class
                message.html(text).show(); // setup and show message
                centerWindow(); // center window

                if (settings.autocloseTime > 0) {
                    clearInterval(autocloseTimer);
                    autocloseTimer = setInterval(function () {
                        showWindow(false);
                        clearInterval(autocloseTimer);
                    }, settings.autocloseTime);
                }

                if (!content.is(':visible')) content.show(); // show content if needed
            },

            // Make email addr validation
            // http://stackoverflow.com/a/46181/2252921
            validEmail = function (addr) {
                return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(addr);
            },

            // Send main function
            // ------------------
            sendMail = function () {
                if (!validEmail(settings.mailTo))
                    return log('Email "' + settings.mailTo + '" is not valid');

                if (!validEmail(settings.mailFrom))
                    return log('Declare valid "Mail From" address');

                var mailBody = '<html lang="en"><head><meta charset="utf-8" /></head><body>' +
                    '<h2>' + settings.l10n.mailTitle + '</h2>' + "\n" +
                    '<p><small>' + settings.l10n.urlHint + ' <a href="' + url.text() + '" target="_blank">' + url.text() + '</a></small></p>' + "\n\n" +
                    '<p>' + settings.l10n.errTextHint + '</p>' + "\n" +
                    '<blockquote>' + textdata.html() + '</blockquote>' + "\n\n";
                if (comment.val())
                    mailBody += '<p>&nbsp;</p><p>' + settings.l10n.userComment + '<br />' + "\n" + '<em>' + comment.val() + '</em></p>';
                mailBody += '</body></html>';

                var apiUrl = '',
                    mailData = {
                        'key': '',
                        'message': {
                            'from_email': settings.mailFrom,
                            'to': [{'email': settings.mailTo, 'type': 'to'}],
                            'autotext': 'true',
                            'subject': clearString(settings.l10n.mailSubject),
                            'html': mailBody
                        }
                    };

                // I think api key length forever eq. 22
                if (settings.sendmailUrl.length > 0) {
                    mailData.key = settings.mandrillKey;
                    apiUrl = settings.sendmailUrl;
                }

                // I think api key length forever eq. 22
                if (settings.mandrillKey && settings.mandrillKey.length == 22) {
                    mailData.key = settings.mandrillKey;
                    // Docs - https://mandrillapp.com/api/docs/messages.JSON.html#method=send
                    apiUrl = 'https://mandrillapp.com/api/1.0/messages/send.json';
                }

                if (apiUrl.length == 0) {
                    showMessage('Wrong settings', 'Check plugin settings', 'fire');
                    return false;
                }

                $.ajax({
                    type: 'POST',
                    url: apiUrl,
                    data: mailData
                }).done(function (response) {
                    if ($.isFunction(settings.onAjaxDone)) settings.onAjaxDone(response); // callback
                    if (((typeof response[0] !== 'undefined') && (response[0].status === 'sent'))
                        || ((typeof response.code !== 'undefined') && (response.code == 1))) {
                        if ($.isFunction(settings.onSendMail)) settings.onSendMail(response); // callback
                        showMessage(settings.l10n.mailSended, settings.l10n.mailSendedDesc, 'star');
                    } else {
                        if ($.isFunction(settings.onAjaxResultError)) settings.onAjaxResultError(response); // callback
                        showMessage(settings.l10n.mailNotSended, settings.l10n.mailNotSendedDesc, 'fire');
                        log('Request was sended, but server answer is not valid');
                    }
                }).error(function (response) {
                    if ($.isFunction(settings.onAjaxSendError)) settings.onAjaxSendError(response); // callback
                    showMessage(settings.l10n.mailNotSended, settings.l10n.mailNotSendedDesc, 'fire');
                    log('Ajax request error with status "' + response.status + '"');
                });

                showLoading(true);
            };

        // Event on objects with close .class
        close.on('click', function () {
            showWindow(false);
        });

        // Event on objects with send .class
        send.on('click', function () {
            sendMail();
        });

        // Event on Ctrl + Enter
        body.keydown(function (e) {
            if (e.ctrlKey && e.keyCode == 13) {
                if ($.isFunction(settings.onCtrlEnter)) settings.onCtrlEnter(); // callback
                var unselected = getUnselectedText(document.body),
                    atStart = clearString(unselected.before.slice(-settings.contextLength)),
                    atEnd = clearString(unselected.after.slice(0, settings.contextLength)),
                    selectedText = escapeHtml(getSelectionText()).replace(/(\r\n|\n|\r)/gm, ' ');
                if (selectedText.length < 1)
                    return false;
                if (selectedText.length > settings.textLimit) {
                    log('Too many text');
                    return false;
                }

                comment.val(''); // clear comment input

                url.text(window.location.href);
                url.attr("title", window.location.href);
                textdata.html('&hellip;' + atStart + '<span class="mipt-textmistake__selected">' + selectedText + '</span>' + atEnd + '&hellip;');

                showWindow(true);
            }
        });

        // event on ESC key pressed
        body.keyup(function (e) {
            if (settings.closeOnEsc && windowIsOpen() && e.keyCode == 27) {
                if ($.isFunction(settings.onEscPressed)) settings.onEscPressed(); // callback
                showWindow(false);
            }
        });
    };

})(jQuery);

$(function () {
    var textmistakeParams = {
        "mailTo": "helpdesk@mipt.ru",
        "sendmailUrl": "/bitrix/tools/main/text_error"
    };

    if (document.documentElement.lang === "ru") {
        textmistakeParams["l10n"] = {
            "title": "Сообщить об опечатке",
            "urlHint": "Адрес страницы с ошибкой:",
            "errTextHint": "Текст с ошибкой:",
            "yourComment": "Ваш комментарий или корректная версия:",
            "userComment": "Комментарий от пользователя:",
            "commentPlaceholder": "Введите комментарий",
            "cancel": "Отмена",
            "send": "Отправить",
            "mailSubject": "Ошибка в тексте на сайте",
            "mailTitle": "Ошибка в тексте на сайте",
            "mailSended": "Уведомление отправлено",
            "mailSendedDesc": "Спасибо, ваше сообщение отправлено, мы постараемся по возможности учесть ваше замечание",
            "mailNotSended": "Ошибка при отправке",
            "mailNotSendedDesc": "Произошла ошибка при отправке сообщения",
        };
    }

    $(document).textmistake(textmistakeParams);
});

/* End */
;
; /* Start:"a:4:{s:4:"full";s:67:"/bitrix/templates/.default/js/jquery.truncateText.js?15124727757398";s:6:"source";s:52:"/bitrix/templates/.default/js/jquery.truncateText.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($) {
  if ($.fn.truncateText) return;

  var dataAttrName = 'TruncatedElem';

  //$(window).on('load', function () {
  //  console.log('Total offsetHeight requests: ' + totalOffsetHeightRequests);
  //});

  function TruncatedElem(elem, settings) {
    var t = this;
    t._settings = $.extend({}, $.fn.truncateText.defaults, settings);
    t._ending = t._settings.ending;
    t._$elem = $(elem);
    t._init();
  }
  TruncatedElem.prototype.reinit = function (settings) {
    var t = this;
    t._settings = $.extend({}, t._settings, settings);
    t._ending = t._settings.ending;
    if (t._$button) {
      t._$button.remove();
      t._$button = null;
    }
    t._init();
  };
  TruncatedElem.prototype._init = function () {
    var t = this;
    var $elem = t._$elem;
    var maxHeight = $elem.height();
    var $elemContents = $elem.contents();
    var $wrapper = $('<div>').css({
      position: 'relative', display: 'block', width: 'auto', height: 'auto',
      padding: 0, border: 'none', margin: 0
    }).append($elemContents.clone()).appendTo($elem.empty());
    if ($wrapper.height() <= maxHeight) {
      $wrapper.replaceWith($elemContents);
      t._isTruncated = false;
      t._isCollapsed = false;
      t._$content = $();
      return;
    }
    t._maxHeight = maxHeight;
    t._originalHtml = $elemContents;
    var $content = $('<div>', { 'class': t._settings.contentClass }).css({
      position: 'absolute', left: 0, top: 0, right: 0, display: 'block',
      width: 'auto', height: 'auto', padding: 0, border: 'none', margin: 0
    }).append($elemContents.clone()).appendTo($wrapper);
    t._$content = $content;
    t._contentElem = $content.get(0);
    if (t._settings.buildButton) {
      t._$button = $('<span>', {
        'class': t._settings.buttonClass + ' '
        + t._settings.buttonClassCollapsed
      }).text(t._settings.buttonTextRestore).appendTo(t._$content);
      $elem.on('click', '.' + t._settings.buttonClass, onCollapseButtonClick);
      t._buttonElem = t._$button.get(0);
    }
    t._truncate(t._contentElem);
    // $content now contains truncated text
    $content.detach().css({
      position: 'static', left: '', top: '', right: ''
    }).replaceAll($wrapper);
    t._truncatedHtml = $content.contents();
    $elem.addClass('truncated');
    t._isTruncated = true;
    t._isCollapsed = true;
  };
  TruncatedElem.prototype._truncate = function (elem) {
    var t = this;
    for (var child = elem.lastChild; child;) {
      if (child === t._buttonElem) {
        child = child.previousSibling;
        continue;
      }
      var nodeType = child.nodeType;
      if (nodeType == 3) { // text node
        var words = child.nodeValue.split(' ');
        var lowerEnd = 0;
        var upperEnd = words.length;
        if (upperEnd >= 1) {
          var end = upperEnd;
          var isOversized = true;
          while (upperEnd > lowerEnd) {
            child.nodeValue = words.slice(0, end).join(' ') + t._ending;
            if (isOversized = t._contentElem.offsetHeight > t._maxHeight) {
              upperEnd = end;
            } else {
              lowerEnd = end + 1;
            }
            end = (upperEnd + lowerEnd) >> 1;
          }
          if (isOversized) {
            if (end > 0) {
              child.nodeValue = words.slice(0, end--).join(' ') + t._ending;
              while (end >= 0) {
                if (t._contentElem.offsetHeight > t._maxHeight) {
                  child.nodeValue = words.slice(0, end--).join(' ') + t._ending;
                } else {
                  return true;
                }
              }
            }
          } else {
            return true;
          }
        }
      } else if (nodeType == 1) {
        var lastChild = child;
        child = child.previousSibling;
        elem.removeChild(lastChild);
        if (t._contentElem.offsetHeight > t._maxHeight) {
          // If deleting last child did not make $content's height less than
          // or equal to the maximum height of the element we already can move
          // to process the previous child.
          continue;
        }
        // Otherwise we re-append the last child and process it normally.
        elem.appendChild(lastChild);
        child = lastChild;
        if (t._truncate(child)) {
          return true;
        }
      }
      // This code should never be reached but it is left here just in case.
      lastChild = child;
      child = child.previousSibling;
      elem.removeChild(lastChild);
    }
    return false;
  };
  TruncatedElem.prototype.isCollapsed = function () {
    return this._isCollapsed;
  };
  TruncatedElem.prototype.isTruncated = function () {
    return this._isTruncated;
  };
  TruncatedElem.prototype.collapse = function () {
    var t = this;
    if (!t._isTruncated || t._isCollapsed) return;
    t._$elem.empty().append(t._$content);
    if (t._$button) {
      t._$elem.children('.' + t._settings.buttonClass).remove();
      t._$button.text(t._settings.buttonTextRestore).
          addClass(t._settings.buttonClassCollapsed);
    }
    t._isCollapsed = true;
  };
  TruncatedElem.prototype.restore = function () {
    var t = this;
    if (!t._isTruncated || !t._isCollapsed) return;
    t._$content.replaceWith(t._originalHtml);
    if (t._$button) {
      t._$button.text(t._settings.buttonTextTruncate).
          removeClass(t._settings.buttonClassCollapsed);
      t._$elem.append(' ').append(t._$button.clone());
    }
    t._isCollapsed = false;
  };
  TruncatedElem.prototype.performAction = function (action) {
    var t = this;
    if (!t._isTruncated) return;
    if (action == 'collapse') {
      t.collapse();
    } else if (action == 'restore') {
      t.restore();
    }
  };

  function onCollapseButtonClick(event) {
    var $button = $(this);
    var $elem = $button.closest('.truncated');
    var truncatedElem = $elem.data(dataAttrName);
    if (!truncatedElem) return;
    if (truncatedElem.isCollapsed()) {
      truncatedElem.restore();
    } else {
      truncatedElem.collapse();
    }
  }

  $.fn.truncateText = function (settings) {
    var setType = typeof settings;
    if (setType === 'string') {
      var action = settings;
      if (action == 'status') {
        var truncatedElem = this.first().data(dataAttrName);
        return truncatedElem ? (truncatedElem.isTruncated() ?
            (truncatedElem.isCollapsed() ? 'collapsed' : 'restored') :
            'untouched') : 'undefined';
      }
      return this.each(function () {
        var $elem = $(this);
        var truncatedElem = $elem.data(dataAttrName);
        if (!truncatedElem) return;
        truncatedElem.performAction(action);
      });
    } else if (!settings || setType === 'object') {
      return this.each(function () {
        var $elem = $(this);
        var truncatedElem = $elem.data(dataAttrName);
        if (truncatedElem) {
          truncatedElem.reinit(settings);
        } else {
          $elem.data(dataAttrName, new TruncatedElem(this, settings));
        }
      });
    }
  };
  $.fn.truncateText.defaults = {
    ending: '...',
    buildButton: false,
    buttonTextTruncate: 'скрыть текст',
    buttonTextRestore: 'весь текст',
    buttonClass: 'collapse-button',
    buttonClassCollapsed: 'text-collapsed',
    contentClass: 'truncated-text',
    footerClass: 'truncated-text-footer'
  };
})(jQuery);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:74:"/bitrix/components/alfa/menu/templates/header_top/script.js?15124587991466";s:6:"source";s:59:"/bitrix/components/alfa/menu/templates/header_top/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($, undefined) {
  $(function () {
    var $menuRoot = $('.header-menu-top');
    $menuRoot.on('mouseenter', '> .list-item', onMenuItemEnter);
    $menuRoot.on('mouseleave', '> .list-item', onMenuItemLeave);
  });

  function onMenuItemEnter() {
    var $listItem = $(this);
    var $subMenu = $listItem.children('.sub-menu');
    if (!$subMenu.length) return;
    var timeoutId = $listItem.data('timeoutId');
    if (timeoutId !== undefined && timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function () {
      $listItem.data('timeoutId', null);
      $listItem.addClass('animating').addClass('hover');
      $subMenu.fadeIn(200, function () {
        $listItem.removeClass('animating');
      });
    }, 150);
    $listItem.data('timeoutId', timeoutId);
  }

  function onMenuItemLeave() {
    var $listItem = $(this);
    var $subMenu = $listItem.children('.sub-menu');
    if (!$subMenu.length) return;
    var timeoutId = $listItem.data('timeoutId');
    if (timeoutId !== undefined && timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function () {
      $listItem.data('timeoutId', null);
    if (!$listItem.hasClass('hover')) return;
      $listItem.addClass('animating').removeClass('hover');
      $subMenu.stop(true).fadeOut(200, function () {
        $listItem.removeClass('animating');
      });
    }, 150);
    $listItem.data('timeoutId', timeoutId);
  }
})(jQuery);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:99:"/bitrix/templates/.default/components/bitrix/main.site.selector/dropdown_op/script.js?1485448540484";s:6:"source";s:85:"/bitrix/templates/.default/components/bitrix/main.site.selector/dropdown_op/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($) {
  var $langMenu = null;
  var timeoutId = 0;
  $(function () {
    $langMenu = $('#top-lang .lang-menu');
    $langMenu.on('mouseenter', function (event) {
      timeoutId = setTimeout(function () {
        $langMenu.css('overflow', 'visible');
      }, 150);
    });
    $langMenu.on('mouseleave', function (event) {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = 0;
      }
      $langMenu.css('overflow', '');
    });
  });
})(jQuery);

/* End */
;
; /* Start:"a:4:{s:4:"full";s:93:"/bitrix/templates/.default/components/bitrix/system.auth.form/custom/script.js?14854485403729";s:6:"source";s:78:"/bitrix/templates/.default/components/bitrix/system.auth.form/custom/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($) {
  var ajaxSettings = {},
      loginBlockHeight = 0,
      passFormHeight = 0,
      $authForm = $(),
      $captchaImg = $(),
      $captchaSid = $(),
      $loginBlock = $(),
      $passBtn = $(),
      $passForm = $(),
      $reloadBtn = $(),
      $wrapper = $();

  $(function () {
    var $nextElem = $('#head, #header-main').first();
    $wrapper = $('<div>', { 'class': 'header-auth-form-placeholder' }).hide();
    $wrapper.insertBefore($nextElem);
    $('.header-auth-form-markup').children().appendTo($wrapper);
    $wrapper.css({
      display: 'block',
      height: 0,
      overflow: 'hidden'
    });
    $authForm = $wrapper.find('.header-auth-form');
    $loginBlock = $authForm.find('.b-login').css('opacity', 1);
    loginBlockHeight = $loginBlock.height();
    $passForm = $wrapper.find('.forgot-password-form').css('opacity', 0).show();
    passFormHeight = $passForm.height();
    $wrapper.css({
      display: '',
      height: '',
      overflow: ''
    });
    $('.header-auth-buttons .login-button').on('click', onLoginBtnClick);

    $passBtn = $authForm.find('.forgot-password-link');
    $passBtn.on('click', onForgotPasswordBtnClick);

    $captchaImg = $authForm.find('.captcha-image');
    $captchaSid = $authForm.find('.captcha-sid');

    $reloadBtn = $authForm.find('.reload-captcha-button');
    $reloadBtn.on('click', onReloadCaptchaBtnClick);
    ajaxSettings = {
      url: $authForm.data('captchaUrl'),
      dataType: "json",
      success: function (response, textStatus, jqXHR) {
        if (!response.status || !response.code) {
          console.log('Unknown response format while reloading captcha: ' +
              response);
          return;
        }
        $captchaImg.attr('src', '/bitrix/tools/captcha.php?captcha_sid=' +
            response.code);
        $captchaSid.val(response.code);
      },
      error: function (jqXHR, textStatus, errorThrown) {
        console.log('Error while reloading captcha: ' + errorThrown +
            '. Status: ' + textStatus + '.');
      },
      complete: function () {
        $reloadBtn.on('click', onReloadCaptchaBtnClick);
      }
    };
    //var $error = $wrapper.find('.message.error');
    //if ($error.length) {
    //  $(window).on('load', function () {
    //    $wrapper.slideToggle(200);
    //  })
    //}
  });
  
  function onLoginBtnClick(event) {
    event.preventDefault();
    $wrapper.slideToggle(200);
  }

  function onReloadCaptchaBtnClick(event) {
    $reloadBtn.off('click');
    $.ajax(ajaxSettings);
  }

  function onForgotPasswordBtnClick(event) {
    event.preventDefault();
    if ($loginBlock.is(':animated') || $passForm.is(':animated')) return;
    if ($passForm.hasClass('visible')) {
      $loginBlock.queue(function () {
        $passForm.fadeTo(200, 0).queue(function () {
          $authForm.css('z-index', 10);
          $passForm.css('z-index', 1).dequeue();
        });
        $loginBlock.animate({
          height: loginBlockHeight
        }, 200).fadeTo(200, 1.0).queue(function () {
          $passForm.removeClass('visible');
          $loginBlock.css('overflow', '').dequeue();
        }).dequeue();
      });
    } else {
      $loginBlock.queue(function () {
        $passForm.addClass('visible');
        $loginBlock.css('overflow', 'hidden').dequeue();
      }).animate({
        height: passFormHeight,
        opacity: 0
      }, {
        duration: 200,
        specialEasing: {
          height: 'swing',
          opacity: 'easeOutCubic'
        }
      }).queue(function () {
        $authForm.css('z-index', 1);
        $passForm.css('z-index', 10).fadeTo(200, 1.0, function () {
          $loginBlock.dequeue();
        });
      });
    }
  }
})(jQuery);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:107:"/bitrix/templates/.default/components/bitrix/system.auth.forgotpasswd/in_auth_form/script.js?14859533032151";s:6:"source";s:92:"/bitrix/templates/.default/components/bitrix/system.auth.forgotpasswd/in_auth_form/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/

/* End */
;
; /* Start:"a:4:{s:4:"full";s:77:"/bitrix/components/alfa/menu/templates/header_bottom/script.js?15124587991471";s:6:"source";s:62:"/bitrix/components/alfa/menu/templates/header_bottom/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function ($, undefined) {
  $(function () {
    var $menuRoot = $('.header-menu-bottom');
    $menuRoot.on('mouseenter', '> .list-item', onMenuItemEnter);
    $menuRoot.on('mouseleave', '> .list-item', onMenuItemLeave);
  });

  function onMenuItemEnter() {
    var $listItem = $(this);
    var $subMenu = $listItem.children('.sub-menu');
    if (!$subMenu.length) return;
    var timeoutId = $listItem.data('timeoutId');
    if (timeoutId !== undefined && timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function () {
      $listItem.data('timeoutId', null);
      $listItem.addClass('animating').addClass('hover');
      $subMenu.fadeIn(200, function () {
        $listItem.removeClass('animating');
      });
    }, 150);
    $listItem.data('timeoutId', timeoutId);
  }

  function onMenuItemLeave() {
    var $listItem = $(this);
    var $subMenu = $listItem.children('.sub-menu');
    if (!$subMenu.length) return;
    var timeoutId = $listItem.data('timeoutId');
    if (timeoutId !== undefined && timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function () {
      $listItem.data('timeoutId', null);
      if (!$listItem.hasClass('hover')) return;
      $listItem.addClass('animating').removeClass('hover');
      $subMenu.stop(true).fadeOut(200, function () {
        $listItem.removeClass('animating');
      });
    }, 150);
    $listItem.data('timeoutId', timeoutId);
  }
})(jQuery);
/* End */
;; /* /js/plugins/textmistake.js?158384293620033*/
; /* /bitrix/templates/.default/js/jquery.truncateText.js?15124727757398*/
; /* /bitrix/components/alfa/menu/templates/header_top/script.js?15124587991466*/
; /* /bitrix/templates/.default/components/bitrix/main.site.selector/dropdown_op/script.js?1485448540484*/
; /* /bitrix/templates/.default/components/bitrix/system.auth.form/custom/script.js?14854485403729*/
; /* /bitrix/templates/.default/components/bitrix/system.auth.forgotpasswd/in_auth_form/script.js?14859533032151*/
; /* /bitrix/components/alfa/menu/templates/header_bottom/script.js?15124587991471*/
